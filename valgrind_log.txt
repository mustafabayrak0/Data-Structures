==391== Memcheck, a memory error detector
==391== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==391== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==391== Command: ./bin/main
==391== 
 ____________________  
|                    | 
|    Hanoi Baskets   | 
|____________________| 
 \/\/\/\/\/\/\/\/\/\/  
  \/\/\/\/\/\/\/\/\/   
   \/\/\/\/\/\/\/\/    
    \/\/\/\/\/\/\/     
     \/\/\/\/\/\/      
      \/\/\/\/\/       
       \/\/\/\/        

Please put incoming numbers to one of three baskets with the goal of obtaining three baskets filled with numbers from highest (at the bottom) to the lowest (at the top).

Press enter to continue..
[3J[H[2J
Turn 0: Baskets look like this:
Basket 1:
Basket is empty.
Basket 2:
Basket is empty.
Basket 3:
Basket is empty.

Incoming number: 6

Press 0 to see jokers.
Where to put the incoming number: [3J[H[2J
Turn 1: Baskets look like this:
Basket 1:
6
Basket 2:
Basket is empty.
Basket 3:
Basket is empty.

Incoming number: 0

Press 0 to see jokers.
Where to put the incoming number: [3J[H[2J
Turn 2: Baskets look like this:
Basket 1:
0
6
Basket 2:
Basket is empty.
Basket 3:
Basket is empty.

Incoming number: 1

Press 0 to see jokers.
Where to put the incoming number: [3J[H[2J
Turn 3: Baskets look like this:
Basket 1:
0
6
Basket 2:
1
Basket 3:
Basket is empty.

Incoming number: 1

Press 0 to see jokers.
Where to put the incoming number: [3J[H[2J
Turn 4: Baskets look like this:
Basket 1:
0
6
Basket 2:
1
1
Basket 3:
Basket is empty.

Incoming number: 2

Press 0 to see jokers.
Where to put the incoming number: [3J[H[2J
Turn 5: Baskets look like this:
Basket 1:
0
6
Basket 2:
1
1
Basket 3:
2

Incoming number: 8

Press 0 to see jokers.
Where to put the incoming number: 
Choose a joker: 
1. Merge baskets: move elements from second basket to the first basket without breaking the order of the elements. (highest at the bottom, lowest at the top)
2. Sequentialize basket: remove elements which break consecutiveness from a basket.

Which basket should be sequentilized: ==391== Invalid write of size 8
==391==    at 0x109A2B: Stack::sequentilized() (stack.cpp:122)
==391==    by 0x1095D2: apply_joker() (main.cpp:252)
==391==    by 0x109320: get_action() (main.cpp:167)
==391==    by 0x108D44: main (main.cpp:57)
==391==  Address 0x5b81290 is 0 bytes inside a block of size 8 free'd
==391==    at 0x4C3323B: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==391==    by 0x109A26: Stack::sequentilized() (stack.cpp:121)
==391==    by 0x1095D2: apply_joker() (main.cpp:252)
==391==    by 0x109320: get_action() (main.cpp:167)
==391==    by 0x108D44: main (main.cpp:57)
==391==  Block was alloc'd at
==391==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==391==    by 0x1098EC: Stack::sequentilized() (stack.cpp:79)
==391==    by 0x1095D2: apply_joker() (main.cpp:252)
==391==    by 0x109320: get_action() (main.cpp:167)
==391==    by 0x108D44: main (main.cpp:57)
==391== 
[3J[H[2J
Turn 5: Baskets look like this:
Basket 1:
0
Basket 2:
1
1
Basket 3:
2

Incoming number: 1

Press 0 to see jokers.
Where to put the incoming number: 
Choose a joker: 
1. Merge baskets: move elements from second basket to the first basket without breaking the order of the elements. (highest at the bottom, lowest at the top)
2. Sequentialize basket: remove elements which break consecutiveness from a basket.

Choose first basket: Choose second basket: [3J[H[2J
Turn 5: Baskets look like this:
Basket 1:
0
1
1
Basket 2:
Basket is empty.
Basket 3:
2

Incoming number: 0

Press 0 to see jokers.
Where to put the incoming number: 
Choose a joker: 
1. Merge baskets: move elements from second basket to the first basket without breaking the order of the elements. (highest at the bottom, lowest at the top)
2. Sequentialize basket: remove elements which break consecutiveness from a basket.

Choose first basket: Choose second basket: [3J[H[2J
Turn 5: Baskets look like this:
Basket 1:
0
1
1
2
Basket 2:
Basket is empty.
Basket 3:
Basket is empty.

Incoming number: 5

Press 0 to see jokers.
Where to put the incoming number: 
Turn 6: Baskets look like this:
Basket 1:
5
0
1
1
2
Basket 2:
Basket is empty.
Basket 3:
Basket is empty.


GAME OVER.
Total points: 20
==391== 
==391== HEAP SUMMARY:
==391==     in use at exit: 0 bytes in 0 blocks
==391==   total heap usage: 14 allocs, 14 frees, 77,960 bytes allocated
==391== 
==391== All heap blocks were freed -- no leaks are possible
==391== 
==391== For counts of detected and suppressed errors, rerun with: -v
==391== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
